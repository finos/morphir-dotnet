<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <TargetFrameworks>net472;net6.0</TargetFrameworks>
        <DebugType>embedded</DebugType>
        <!-- This target will run when MSBuild is collecting the files to be packaged, and we'll implement it below. This property controls the dependency list for this packaging process, so by adding our custom property we hook ourselves into the process in a supported way. -->
        <TargetsForTfmSpecificBuildOutput>
            $(TargetsForTfmSpecificBuildOutput);CopyProjectReferencesToPackage
        </TargetsForTfmSpecificBuildOutput>
        <!-- This property tells MSBuild where the root folder of the package's build assets should be. Because we are not a library package, we should not pack to 'lib'. Instead, we choose 'tasks' by convention. -->
        <BuildOutputTargetFolder>tasks</BuildOutputTargetFolder>
        <!-- NuGet does validation that libraries in a package are exposed as dependencies, but we _explicitly_ do not want that behavior for MSBuild tasks. They are isolated by design. Therefore we ignore this specific warning. -->
        <NoWarn>NU5128;NU5100</NoWarn><!-- NU5100 is because we pack to tasks/, not lib/ -->
        <GenerateDocumentationFile>true</GenerateDocumentationFile>
        <!-- Tell the SDK to generate a deps.json file -->
        <GenerateDependencyFile>true</GenerateDependencyFile>
    </PropertyGroup>

    <ItemGroup>
        <Compile Include="WriteMorphirJsonTask.fs" />
        <!-- these lines pack the single-TFM build props/targets files to the `build` folder in the generated package.
         By convention, the .NET SDK will look for `build\<Package Id>.props` and `build\<Package Id>.targets`
         for automatic inclusion in a single-TFM build. -->
        <Content Include="build\*" PackagePath="build\" />
        <!-- these lines pack the multi-target TFM build props/targets files to the `buildMultiTargeting` folder in the generated package.
             By convention, the .NET SDK will look for `buildMultiTargeting\<Package Id>.props` and `buildMultiTargeting\<Package Id>.targets`
             for automatic inclusion in a multi-TFM build. -->
        <Content Include="buildMultiTargeting\*" PackagePath="buildMultiTargeting\" />
    </ItemGroup>
    
    <ItemGroup>
        <PackageReference Include="FSharp.Core" PrivateAssets="all" />
        <PackageReference Include="Microsoft.Build.Utilities.Core" PrivateAssets="all" ExcludeAssets="Runtime" />
    </ItemGroup>
    
    <ItemGroup>
      <ProjectReference Include="..\Morphir.Core\Morphir.Core.fsproj" PrivateAssets="all" />
    </ItemGroup>
    
<!--    <ItemGroup>-->
<!--        <PackageFile Include="build\Morphir.MSBuild.props" Kind="build" />-->
<!--        <PackageFile Include="build\Morphir.MSBuild.targets" Kind="build" />-->
<!--    </ItemGroup>-->
    <Target Name="AddBuildDependencyFileToBuiltProjectOutputGroupOutput" BeforeTargets="BuiltProjectOutputGroup" Condition=" '$(GenerateDependencyFile)' == 'true'">

        <ItemGroup>
            <BuiltProjectOutputGroupOutput Include="$(ProjectDepsFilePath)" TargetPath="$(ProjectDepsFileName)" FinalOutputPath="$(ProjectDepsFilePath)" />
        </ItemGroup>
    </Target>

    <Target Name="CopyProjectReferencesToPackage" DependsOnTargets="ResolveReferences">
        <ItemGroup>
            <!-- the dependencies of your MSBuild task must be packaged inside the package, they cannot be expressed as normal PackageReferences -->
            <BuildOutputInPackage Include="@(ReferenceCopyLocalPaths)" TargetPath="%(ReferenceCopyLocalPaths.DestinationSubPath)" />
        </ItemGroup>
    </Target>
</Project>
