name: "Deployment"
on:
    workflow_dispatch:
        inputs:
            configuration:
                description: "Configuration to build"
                required: true
                default: "Release"
                type: string
            release-version:
                description: "Release version following semantic versioning"
                required: true
                default: "0.0.0"
                type: string
            skip-git-release:
                description: "Skip git release"
                required: false
                default: false
                type: boolean

env:
    CONFIGURATION: ${{ github.event.inputs.configuration || 'Release' }}
    RELEASE_VERSION: ${{ github.event.inputs.release-version }}
    NUGET_TOKEN: ${{ secrets.NUGET_TOKEN }}
    SKIP_GIT_RELEASE: ${{ github.event.inputs.skip-git-release }}

jobs:
    validate-release-version:
        runs-on: ubuntu-latest
        steps:
            - name: Check if release_version is valid
              id: check_semver
              uses: actions/github-script@v6
              with:
                  script: |
                      const semverPattern = /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\+[0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*)?$/;
                      const version = process.env.RELEASE_VERSION;
                      if (!semverPattern.test(version)) {
                        core.setFailed(`Invalid semantic version: ${version}`);             
                      }

    release:
        runs-on: ubuntu-latest
        needs: [validate-release-version]
        # First of all the release job requires a manual trigger
        # Second, the release job will only run if it is provided a valid semantic version
        # Third, the release job will only run if the current repository is the main repository
        # when in main repo: all commits to main branch and all additional tags
        if: ${{ !failure() }}

        steps:
            - name: Get User Email
              id: get_user_email
              uses: evvanErb/get-github-email-by-username-action@v2
              with:
                  github-username: ${{ github.actor }}
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Fetch Source Code
              uses: actions/checkout@v3.5.0
              with:
                  fetch-depth: 0
            - name: Setup .NET Core SDK
              uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: "7.0.x"
            # Not specifying a version will attempt to install via global.json
            - name: Use .NET Core global.json
              uses: actions/setup-dotnet@v3
            - name: Cache Nuget Packages
              uses: actions/cache@v3
              with:
                  path: ~/.nuget/packages
                  # Look to see if there is a cache hit for the corresponding requirements file
                  key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-nuget
            - name: Print the user's email
              run: |
                  echo "The user who executed this workflow was: ${{github.actor}} and the user's email is: ${{ steps.get_user_email.outputs.email }}"
            - name: Publish (non-Windows)
              if: runner.os != 'Windows'
              run: |
                  chmod +x ./build.sh
                  ./build.sh Release
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  GIT_USER_NAME: ${{ github.actor }}
                  GIT_USER_EMAIL: ${{ steps.get_user_email.outputs.email }}
                  CI: true
            - name: Publish (Windows)
              if: runner.os == 'Windows'
              run: ./build.cmd Release
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  GIT_USER_NAME: ${{ github.actor }}
                  GIT_USER_EMAIL: ${{ steps.get_user_email.outputs.email }}
                  CI: true

    cd:
        runs-on: ubuntu-latest
        needs: [validate-release-version, release]
        steps:
            - name: Aggregate of deployment jobs
              run: echo "cd passed"
