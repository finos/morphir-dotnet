name: "CI/CD"

on:
    pull_request:
    push:
        branches: ["main"]
    workflow_dispatch:
        inputs:
            release_version:
                description: "Release version following semantic versioning"
                required: true
                type: string

jobs:
    lint:
        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest, macOS-latest]
        runs-on: ${{ matrix.os }}

        steps:
            - uses: actions/checkout@v3.5.0
              with:
                  fetch-depth: 0
            - name: Setup .NET Core SDK
              uses: actions/setup-dotnet@v2
              with:
                  dotnet-version: "7.0.x"
            # Not specifying a version will attempt to install via global.json
            - name: Use .NET Core global.json
              uses: actions/setup-dotnet@v2
            - uses: actions/cache@v3
              with:
                  path: ~/.nuget/packages
                  # Look to see if there is a cache hit for the corresponding requirements file
                  key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-nuget
            - name: Build
              if: runner.os != 'Windows'
              run: |
                  chmod +x ./build.sh
                  ./build.sh CheckFormatCode
              env:
                  CI: true
            - name: Build
              if: runner.os == 'Windows'
              run: ./build.cmd CheckFormatCode
              env:
                  CI: true

    test:
        strategy:
            matrix:
                os: [ubuntu-latest, windows-latest, macOS-latest]
        runs-on: ${{ matrix.os }}

        steps:
            - uses: actions/checkout@v3.5.0
            - name: Setup .NET Core SDK
              uses: actions/setup-dotnet@v2
              with:
                  dotnet-version: "7.0.x"
            # Not specifying a version will attempt to install via global.json
            - name: Use .NET Core global.json
              uses: actions/setup-dotnet@v2
            - uses: actions/cache@v3
              with:
                  path: ~/.nuget/packages
                  # Look to see if there is a cache hit for the corresponding requirements file
                  key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-nuget
            - name: Build
              if: runner.os != 'Windows'
              run: |
                  chmod +x ./build.sh
                  ./build.sh GenerateCoverageReport
              env:
                  CI: true
            - name: Build
              if: runner.os == 'Windows'
              run: ./build.cmd GenerateCoverageReport
              env:
                  CI: true
            - name: Upload Artifacts
              uses: actions/upload-artifact@v2
              with:
                  name: docs
                  path: ./docs

    ci:
        runs-on: ubuntu-latest
        needs: [lint, test]
        steps:
            - name: Aggregate of lint, and all tests
              run: echo "ci passed"
              
    validate-release-version:
        runs-on: ubuntu-latest
        if: ${{ github.event_name == 'workflow_dispatch' }}
        steps:
            - name: Check if release_version is valid
              uses: actions/github-script@v6
              with:
                  script: |
                      const semverPattern = /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\+[0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*)?$/;
                      const version = process.env.RELEASE_VERSION;
                      if (!semverPattern.test(version)) {
                        core.setFailed(`Invalid semantic version: ${version}`);
                      }
              env:
                  RELEASE_VERSION: ${{ github.event.inputs.release_version }}

    release:
        runs-on: ubuntu-latest
        needs: [ci, validate-release-version]
        # First of all the release job requires a manual trigger
        # Second, the release job will only run if it is provided a valid semantic version
        # Third, the release job will only run if the current repository is the main repository
        # when in main repo: all commits to main branch and all additional tags
        if: ${{ github.event_name == 'workflow_dispatch' && !failure() }} && github.repository == 'finos/morphir-dotnet' && ( github.ref == 'refs/heads/main' || (github.ref != 'refs/heads/main' && startsWith( github.ref, 'refs/tags/') ) )

        steps:
            - name: Fetch Source Code
              uses: actions/checkout@v3.5.0
              with:
                  fetch-depth: 0
            - name: Setup .NET Core SDK
              uses: actions/setup-dotnet@v2
              with:
                  dotnet-version: "7.0.x"
            # Not specifying a version will attempt to install via global.json
            - name: Use .NET Core global.json
              uses: actions/setup-dotnet@v2
            - name: Cache Nuget Packages
              uses: actions/cache@v3
              with:
                  path: ~/.nuget/packages
                  # Look to see if there is a cache hit for the corresponding requirements file
                  key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-nuget

            - name: Publish
              if: runner.os != 'Windows'
              run: |
                  chmod +x ./build.sh
                  ./build.sh Release
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  RELEASE_VERSION: ${{ github.event.inputs.release_version }}
                  CI: true
            - name: Publish
              if: runner.os == 'Windows'
              run: ./build.cmd Release
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  RELEASE_VERSION: ${{ github.event.inputs.release_version }}
                  CI: true

    cd:
        runs-on: ubuntu-latest
        needs: [validate-release-version, release]
        steps:
            - name: Aggregate of deployment jobs
              run: echo "cd passed"
